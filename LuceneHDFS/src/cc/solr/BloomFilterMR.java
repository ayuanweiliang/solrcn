package cc.solr;

import java.io.IOException;
import java.util.Iterator;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.conf.Configured;
import org.apache.hadoop.fs.FSDataOutputStream;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapred.FileInputFormat;
import org.apache.hadoop.mapred.FileOutputFormat;
import org.apache.hadoop.mapred.JobClient;
import org.apache.hadoop.mapred.JobConf;
import org.apache.hadoop.mapred.KeyValueTextInputFormat;
import org.apache.hadoop.mapred.MapReduceBase;
import org.apache.hadoop.mapred.Mapper;
import org.apache.hadoop.mapred.OutputCollector;
import org.apache.hadoop.mapred.Reducer;
import org.apache.hadoop.mapred.Reporter;
import org.apache.hadoop.mapred.lib.NullOutputFormat;
import org.apache.hadoop.util.Tool;
import org.apache.hadoop.util.ToolRunner;
import org.apache.hadoop.util.bloom.BloomFilter;
import org.apache.hadoop.util.bloom.Key;
import org.apache.hadoop.util.hash.Hash;

public class BloomFilterMR extends Configured implements Tool {

    public static class MapClass extends MapReduceBase implements
            Mapper<Text, Text, Text, BloomFilter> {

        BloomFilter bf = new BloomFilter(100000000, 4, Hash.MURMUR_HASH);
        OutputCollector<Text, BloomFilter> oc = null;


        
        @Override
        public void map(Text key, Text value,
                OutputCollector<Text, BloomFilter> output,
                Reporter reporter) throws IOException {
            if (oc == null)
                oc = output;
            if(key!=null && !key.toString().isEmpty()){
            	bf.add(new Key(key.toString().getBytes()));
            }
			
        }

        /**
         * we should output the BloomFilter in the close() method to ensure that 
         * all the records in the split have been read
         * bf is the instance of BloomFilter
         */
        public void close() throws IOException {
            oc.collect(new Text("testkey"), bf);
        }

    }

    public static class Reduce extends MapReduceBase implements
            Reducer<Text, BloomFilter, Text, Text> {
        JobConf job = null;
        BloomFilter bf = new BloomFilter(1000000, 4, Hash.MURMUR_HASH);

        public void configure(JobConf job) {
            this.job = job;
        }
        
        
        /**
         * The BloomFilters generated by all the mappers are sent to a single reducer. 
         * The reduce() method in the Reduce class will do a Bloom filter union of all of them
         */
        public void reduce(Text key, Iterator<BloomFilter> values,
                OutputCollector<Text, Text> output, Reporter reporter)
                throws IOException {
            //do a Bloom filter union of all of them
            while (values.hasNext()) {
            	bf.or(values.next());
            }
        }
        
        public void close() throws IOException {
            Path file = new Path(job.get("mapred.output.dir") + "/bloomfilter");
            FSDataOutputStream out = file.getFileSystem(job).create(file);
            bf.write(out);
            out.close();
        }
    }

    @Override
    public int run(String[] args) throws Exception {
        Configuration conf = getConf();
        JobConf job = new JobConf(conf, BloomFilterMR.class);

        Path in = new Path(args[0]);
        Path out = new Path(args[1]);

        FileInputFormat.setInputPaths(job, in);
        FileOutputFormat.setOutputPath(job, out);

        job.setJobName("Bloom Filter");
        job.setMaxMapAttempts(4);        
        job.setMapperClass(MapClass.class);
        job.setReducerClass(Reduce.class); 
        
        /**
         * The output key will not matter in terms of partitioning 
         * because we only have a single reducer.        
         */
        job.setNumReduceTasks(1);
        job.setInputFormat(KeyValueTextInputFormat.class);
        
        /**
         * output the final BloomFilter as a binary file
         */
        job.setOutputFormat(NullOutputFormat.class);//
        job.setOutputKeyClass(Text.class);
        
        /**
         * mappers will output a key/value pair where the value is a BloomFilter instance.
         */
        job.setOutputValueClass(BloomFilter.class);
//        job.set("key.value.separator.in.input.line", ",");

        JobClient.runJob(job);

        return 0;
    }

    public static void main(String[] args) throws Exception {
        int res = ToolRunner.run(new Configuration(), new BloomFilterMR(), args);
        System.exit(res);
    }

}